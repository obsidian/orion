#!/usr/bin/env crystal run --release
require "./src/orion"
require "benchmark"

{% for i in 5..8 %}
  {% route_count = 2 ** i %}
  router MyRouter{{route_count}} do
    \{% for i in 0..{{route_count}} %}
      get "/route_\{{i}}(/:param1(/:param2))", ->(context : ::HTTP::Server::Context) {
        param1, param2 = { context.request.path_params["param1"]?, context.request.path_params["param2"]? }.map { |param| param || "nothing" }
        context.response << "hi from route_{{i}}, you passed #{param1} and #{param2}"
      }
    \{% end %}
  end
{% end %}

raw_handler = ->(context : HTTP::Server::Context) { context.response << "raw throughput" }

def route_gen(max_index)
  "/route_#{rand(0..max_index)}#{"/foo#{"/bar" if rand < 5}" if rand < 5}"
end

def send_request(router, route)
  request = HTTP::Request.new("GET", route)
  response = HTTP::Server::Response.new(IO::Memory.new)
  context = HTTP::Server::Context.new request, response
  router.call(context)
  response
end

Benchmark.ips do |bm|
  puts "requests per second"

  bm.report("without router (raw server throughput)") do
    send_request raw_handler, route_gen(10_000)
  end

  {% for i in 5..8 %}
    {% route_count = 2 ** i %}
    %router = MyRouter{{route_count.id}}.new

    bm.report("through router with {{route_count}} routes") do
      send_request %router, route_gen({{route_count}})
    end
  {% end %}
end
